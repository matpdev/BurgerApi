// <auto-generated />
using System;
using BurgerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BurgerApi.Migrations
{
    [DbContext(typeof(BurgerContext))]
    [Migration("20240310231811_integrationsUpdate")]
    partial class integrationsUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BurgerApi.Models.Establishment", b =>
                {
                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer")
                        .HasColumnName("establishment_id");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("Ownerid")
                        .HasColumnType("integer")
                        .HasColumnName("ownerid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.HasKey("EstablishmentId")
                        .HasName("establishments_pkey");

                    b.HasIndex("Ownerid");

                    b.ToTable("establishments", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.EstablishmentProduct", b =>
                {
                    b.Property<int>("EstablishmentProductId")
                        .HasColumnType("integer")
                        .HasColumnName("establishment_product_id");

                    b.Property<bool?>("Availability")
                        .HasColumnType("boolean")
                        .HasColumnName("availability");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int?>("EstablishmentId")
                        .HasColumnType("integer")
                        .HasColumnName("establishment_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("EstablishmentProductId")
                        .HasName("establishment_products_pkey");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("establishment_products", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.OpeningTime", b =>
                {
                    b.Property<int>("OpeningTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("opening_time_id");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("close_time");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("day_of_week");

                    b.Property<int?>("EstablishmentId")
                        .HasColumnType("integer")
                        .HasColumnName("establishment_id");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("open_time");

                    b.HasKey("OpeningTimeId")
                        .HasName("opening_times_pkey");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("opening_times", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("subtotal");

                    b.HasKey("OrderId")
                        .HasName("order_details_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_method");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("payments_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<bool?>("Availability")
                        .HasColumnType("boolean")
                        .HasColumnName("availability");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("ProductId")
                        .HasName("products_pkey");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("IntegrationToken")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BurgerApi.Models.Establishment", b =>
                {
                    b.HasOne("BurgerApi.Models.User", "Owner")
                        .WithMany("Establishments")
                        .HasForeignKey("Ownerid")
                        .HasConstraintName("establishments_ownerid_fkey");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BurgerApi.Models.EstablishmentProduct", b =>
                {
                    b.HasOne("BurgerApi.Models.Establishment", "Establishment")
                        .WithMany("EstablishmentProducts")
                        .HasForeignKey("EstablishmentId")
                        .HasConstraintName("establishment_products_establishment_id_fkey");

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("BurgerApi.Models.OpeningTime", b =>
                {
                    b.HasOne("BurgerApi.Models.Establishment", "Establishment")
                        .WithMany("OpeningTimes")
                        .HasForeignKey("EstablishmentId")
                        .HasConstraintName("opening_times_establishment_id_fkey");

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("BurgerApi.Models.OrderDetail", b =>
                {
                    b.HasOne("BurgerApi.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("order_details_product_id_fkey");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BurgerApi.Models.Payment", b =>
                {
                    b.HasOne("BurgerApi.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("payments_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BurgerApi.Models.Establishment", b =>
                {
                    b.Navigation("EstablishmentProducts");

                    b.Navigation("OpeningTimes");
                });

            modelBuilder.Entity("BurgerApi.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BurgerApi.Models.User", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
